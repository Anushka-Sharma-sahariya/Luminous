# -*- coding: utf-8 -*-
"""Basic analysis

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11cxOPIdvz5V7j9ZNx5Si9Bj90qeA_w6e
"""

import numpy as np
import pandas as pd

date_range = pd.date_range(start='2023-01-01', periods=365, freq='D')

data = {
    'Date': date_range,
    'Tariff (cents/kWh)': np.random.uniform(10, 30, size=(365,)),  # Tariff prices between 10 to 30 cents/kWh
    'Energy Consumption (kWh)': np.random.uniform(5, 50, size=(365,)),  # Daily consumption between 5 and 50 kWh
    'Solar Energy Production (kWh)': np.random.uniform(0, 25, size=(365,)),  # Daily solar production between 0 and 25 kWh
    'Smart Schedule Usage (%)': np.random.uniform(10, 100, size=(365,)),  # % of time users use smart scheduling
    'Community Power Sharing (kWh)': np.random.uniform(0, 10, size=(365,)),  # Power shared between community (kWh)
    'Gamification Score': np.random.randint(0, 100, size=(365,)),  # User engagement scores (gamification)
    'CO2 Reduction (kg)': np.random.uniform(0, 50, size=(365,))
}

df = pd.DataFrame(data)
df.to_csv('electricity_data.csv', index=False)

df

df['Cost (USD)'] = (df['Energy Consumption (kWh)'] - df['Solar Energy Production (kWh)']) * (df['Tariff (cents/kWh)'] / 100)

# Add dummy notification data (random days when notifications were sent)
df['Notifications Sent'] = np.random.choice([0, 1], size=(365,), p=[0.9, 0.1])  # 10% of days notifications were sent

# Calculate cost-benefit analysis (saving due to solar energy production)
df['Cost Savings (USD)'] = (df['Solar Energy Production (kWh)']) * (df['Tariff (cents/kWh)'] / 100)

# Save the DataFrame to a CSV file
df.to_csv('luminous_dummy_dataset.csv', index=False)

print("Dummy dataset created and saved as 'luminous_dummy_dataset.csv'")

import matplotlib.pyplot as plt
import seaborn as sns

# Summary statistics for the dataset
summary_stats = df.describe()
print("Summary Statistics:")
print(summary_stats)

# Correlation matrix to understand relationships between the variables
correlation_matrix = df.corr()

# Visualize energy consumption and solar energy production trends over time
plt.figure(figsize=(12, 6))
plt.plot(df['Date'], df['Energy Consumption (kWh)'], label='Energy Consumption (kWh)', color='blue')
plt.plot(df['Date'], df['Solar Energy Production (kWh)'], label='Solar Energy Production (kWh)', linestyle='--', color='orange')
plt.xlabel('Date')
plt.ylabel('Energy (kWh)')
plt.title('Energy Consumption and Solar Energy Production Over Time')
plt.legend()
plt.grid(True)
plt.show()

# Heatmap of the correlation matrix
plt.figure(figsize=(10, 8))
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', fmt='.2f')
plt.title('Correlation Matrix of Features')
plt.show()

# Visualizing the Cost and Cost Savings over Time
plt.figure(figsize=(12, 6))
plt.plot(df['Date'], df['Cost (USD)'], label='Cost (USD)', color='green')
plt.plot(df['Date'], df['Cost Savings (USD)'], label='Cost Savings (USD)', linestyle='--', color='red')
plt.xlabel('Date')
plt.ylabel('USD')
plt.title('Cost and Cost Savings Over Time')
plt.legend()
plt.grid(True)
plt.show()

# Visualizing CO2 reduction over time
plt.figure(figsize=(12, 6))
plt.plot(df['Date'], df['CO2 Reduction (kg)'], label='CO2 Reduction (kg)', color='purple')
plt.xlabel('Date')
plt.ylabel('CO2 Reduction (kg)')
plt.title('CO2 Reduction Over Time')
plt.legend()
plt.grid(True)
plt.show()

